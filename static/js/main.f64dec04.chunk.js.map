{"version":3,"sources":["test/modal.js","test/home.js","App.js","serviceWorker.js","index.js"],"names":["AppModal","props","dateChange","e","setState","target","name","value","filterbyDate","isLoad","userData","testData","filter","m","id","filterData","activity_periods","pushDate","i","startDate","moment","start_time","_d","endDate","end_time","sDate1","Date","state","sDate","toDateString","eDate1","eDate","getTime","push","modalOpen","open","this","dataOk","console","log","tableBody","key","Number","tz","format","Modal","isOpen","ModalHeader","className","ModalBody","real_name","type","onChange","Button","color","onClick","Table","bordered","ModalFooter","toggle","React","Component","App","checked","isModal","json","ok","members","href","faPadding","padding","style","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.f64dec04.chunk.js","sourcesContent":["import React from 'react'\r\nimport moment from 'moment-timezone'\r\nimport { Modal, ModalHeader,ModalBody,ModalFooter,Button,Table } from 'reactstrap'\r\n\r\nclass AppModal extends React.Component {\r\n\tconstructor(props) {\r\n\t\tsuper(props);\r\n\t\tthis.state={\r\n\t\t\tmodalOpen: this.props.open,\r\n\t\t\tsDate: '',\r\n\t\t\teDate: '',\r\n\t\t\tuserData:[],\r\n\t\t\tfilterData:[]\r\n\t\t}\r\n\t}\r\n\r\n\tdateChange=(e)=>{\r\n\t\tthis.setState({[e.target.name]:e.target.value})\r\n\t}\r\n\r\n\tfilterbyDate=(isLoad)=> {\r\n\t\tlet userData=this.props.testData.filter(m=>m.id===this.props.id)[0]\r\n\t\tlet filterData=userData.activity_periods\r\n\t\tthis.setState({userData})\r\n\t\t//if(!isLoad)\r\n\t\tlet pushDate=[]\r\n\t\tfor(let i in filterData) {\r\n\t\t\tlet startDate=moment(filterData[i].start_time,'MMM D YYYY h:mma')._d\r\n\t\t\tlet endDate=moment(filterData[i].end_time,'MMM D YYYY h:mma')._d\r\n\r\n\t\t\tlet sDate1=new Date(new Date(this.state.sDate).toDateString())\r\n\t\t\tlet eDate1=new Date(new Date(this.state.eDate).toDateString())\r\n\t\t\t\r\n\t\t\tif(startDate.getTime()>=sDate1.getTime()&&endDate.getTime()<=eDate1.getTime())\r\n\t\t\t\tpushDate.push(filterData[i])\r\n\t\t}\r\n\t\tif(isLoad) this.setState({filterData})\r\n\t\t\telse this.setState({filterData:pushDate})\r\n\t\t}\r\n\r\n\tcomponentDidMount()\t{\r\n\t\tif(this.props.dataOk)\r\n\t\t\tthis.filterbyDate(true);\r\n\t}\r\n\r\n\trender()\r\n\t{\r\n\t\tconsole.log(this.props)\r\n\t\tlet tableBody=[]\r\n\t\tfor(let i in this.state.filterData)\r\n\t\t{\r\n\t\t\tlet startDate=moment(this.state.filterData[i].start_time,'MMM D YYYY h:mma')\r\n\t\t\tlet endDate=moment(this.state.filterData[i].end_time,'MMM D YYYY h:mma')\r\n\r\n\t\t\ttableBody.push(\r\n\t\t\t\t<tr key={i}>\r\n\t\t\t\t<td>{1+Number(i)}</td>\r\n\t\t\t\t{this.props.tz!==''?\r\n\t\t\t\t(\r\n\t\t\t\t\t<>\r\n\t\t\t\t\t<td>{startDate.format('D MMM YYYY')}</td>\r\n\t\t\t\t\t<td>{startDate.format('h:mmA')}</td>\r\n\t\t\t\t\t<td>{endDate.format('h:mmA')}</td>\t\r\n\t\t\t\t\t</>\r\n\t\t\t\t)\r\n\t\t\t\t:\r\n\t\t\t\t(\r\n\t\t\t\t\t<>\r\n\t\t\t\t\t<td>{startDate.tz(this.state.userData.tz).format('D MMM YYYY')}</td>\r\n\t\t\t\t\t<td>{startDate.tz(this.state.userData.tz).format('h:mmA')}</td>\r\n\t\t\t\t\t<td>{endDate.tz(this.state.userData.tz).format('h:mmA')}</td>\t\r\n\t\t\t\t\t</>\r\n\t\t\t\t)}\t\t\t\t\r\n\t\t\t\t</tr>\t  \t  \r\n\t\t\t\t)\r\n\t\t}\r\n\t\tlet modal= (\r\n\t\t\t<div>\r\n\t\t\t<Modal isOpen={this.state.modalOpen}>\r\n\t\t\t<ModalHeader className=\"App\">Activity Periods</ModalHeader>\r\n\t\t\t<ModalBody>\r\n\t\t\t<div className=\"row\">      \r\n\t\t\t<div className=\"col-12 text-center\">\r\n\r\n\t\t\t<p className=\"text-muted text-center\">User ID : {this.state.userData.id}</p>\r\n\t\t\t<p className=\"text-muted text-center\">User Name : {this.state.userData.real_name}</p>\r\n\t\t\tDate From: <input type=\"date\" name=\"sDate\" onChange={this.dateChange} />{'  '}\r\n\t\t\tDate To: <input type=\"date\" name=\"eDate\" onChange={this.dateChange} />{'  '}\r\n\t\t\t<Button color=\"primary\" onClick={()=>this.filterbyDate(false)}>Go</Button>\r\n\t\t\t</div>\r\n\t\t\t<div className=\"col-12 text-center\">\r\n\t\t\t<br />\r\n\t\t\t<Table bordered>\r\n\t\t\t<thead>\r\n\t\t\t<tr>\r\n\t\t\t<th>#</th>\r\n\t\t\t<th>Date</th>\r\n\t\t\t<th>Start Time</th>\r\n\t\t\t<th>End Time</th>\r\n\t\t\t</tr>\r\n\t\t\t</thead>\r\n\t\t\t<tbody> \r\n\t\t\t{tableBody}      \r\n\t\t\t</tbody>\r\n\t\t\t</Table>\r\n\t\t\t</div>\r\n\r\n\t\t\t</div>\r\n\t\t\t</ModalBody>\r\n\t\t\t<ModalFooter>\r\n\t\t\t<Button color=\"secondary\" onClick={this.props.toggle}>Close</Button>\r\n\t\t\t</ModalFooter>\r\n\r\n\t\t\t</Modal>\r\n\t\t\t</div>\r\n\t\t\t)\r\n\r\n\t\t\treturn modal\r\n\t\t}\r\n\r\n\t}\r\n\r\n\texport default AppModal;","import React from 'react'\r\nimport AppModal from './modal'\r\nimport 'bootstrap/dist/css/bootstrap.css';\r\nimport { Table } from 'reactstrap'\r\nimport json from '../Test JSON.json'\r\n\r\nclass App extends React.Component {\r\n  constructor(props)\r\n  {\r\n  \tsuper(props);\r\n  \tthis.state = {\r\n  \t\tisModal:false,\r\n  \t\tdataOk:false,\r\n  \t\ttestData:{},\r\n  \t\tid:'',tz:''\r\n  \t}\r\n  }\r\n\r\n  onChange=(e)=>{  \t\r\n\t\tthis.setState({tz:e.target.checked?\"checked\":\"\"})\r\n  }\r\n\r\n  toggle=(id)=>{\r\n  \tthis.setState({isModal:!this.state.isModal,id})\r\n  }\r\n\r\n  componentDidMount() {\r\n  \t\tthis.setState({dataOk:json.ok, testData:json.members})  \t\r\n  }\r\n\r\n  render() {\r\n  \tlet tableBody=[]\r\n  \tif(this.state.dataOk) {\r\n\t  for(let i in this.state.testData)  \t\t\r\n\t  {\r\n\t  \ttableBody.push(\t  \t  \r\n\t  \t  <tr key={i}>\r\n\t  \t  <td>{Number(i)+1}</td>\r\n\t  \t  <td>{this.state.testData[i].id}</td>\r\n\t  \t  <td><a href=\"#\" onClick={()=>this.toggle(this.state.testData[i].id)}> {this.state.testData[i].real_name}</a></td>\r\n\t  \t  <td>{this.state.testData[i].tz}</td>\r\n\t  \t  </tr>\t  \t  \r\n\t  \t)\r\n\t  }\r\n  \t}\r\n  \tlet faPadding={padding:'10px'}\r\n    let\tview=(\r\n  \t  <>\r\n  \t  \t<h1>Frontend Test - FullThrottle Labs</h1>\r\n  \t  \t<div style={faPadding}>\r\n  \t  \t<div className=\"text-right\" style={faPadding}><input type=\"checkbox\" checked={this.state.tz} name=\"tz\" onChange={this.onChange} /> {' '}Timezone with Indian Standard Time</div>\r\n  \t  \t<Table bordered>\r\n\t  \t  \t<thead>\r\n\t        <tr>\r\n\t          <th>#</th>\r\n\t          <th>ID</th>\r\n\t          <th>Real Name</th>\r\n\t          <th>Time Zone</th>\r\n\t        </tr>\r\n\t      \t</thead>\r\n\t      \t<tbody> \r\n\t      \t{tableBody}      \r\n      \t\t</tbody>\r\n  \t  \t</Table>\r\n  \t  \t</div>\r\n  \t  \t{this.state.isModal?<AppModal open={true} toggle={this.toggle} {...this.state} />:''}\r\n  \t  </>\r\n  \t)\r\n  \treturn view;\r\n  }\r\n}\r\n\r\nexport default App;","import React from 'react';\n// import logo from './logo.svg';\nimport './App.css';\nimport Home from './test/home';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Home />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}