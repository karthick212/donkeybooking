{"version":3,"sources":["test.js","App.js","serviceWorker.js","index.js"],"names":["App","props","clear","data","state","isEdit","Object","keys","forEach","key","setState","autoinc","onChange","event","target","name","value","validateFields","error","isError","username","age","designation","console","log","getUser","axios","get","serverURL","params","code","then","res","getdata","status","onSubmit","e","preventDefault","url","post","alert","id","componentDidMount","errmsg","className","Card","CardHeader","tag","CardBody","type","this","Button","color","onClick","React","Component","basename","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.dbb51646.chunk.js","sourcesContent":["import React from 'react'\r\nimport { Card, Button, CardHeader, CardBody } from 'reactstrap';\r\nimport axios from 'axios'\r\n\r\nimport 'bootstrap/dist/css/bootstrap.css';\r\n\r\nclass App extends React.Component {\r\n  constructor(props)\r\n  {\r\n  \tsuper(props);    \r\n  \tthis.state = {\r\n  \t\tcode:'',username:'',age:'',designation:'',isEdit:false,error:{username:'',age:'',designation:'',errmsg:''}\r\n  \t}\r\n  }\r\n  clear=()=>{\r\n    const data=this.state;\r\n    data.isEdit=false    \r\n    Object.keys(data).forEach(key=> {\r\n      if(key!=='error')\r\n        data[key]=''\r\n    });\r\n    this.setState({data})\r\n    this.autoinc();\r\n  }\r\n  onChange=(event)=>{\r\n    this.setState({[event.target.name]:event.target.value})\r\n  }\r\n  validateFields=()=>{\r\n    const data=this.state;\r\n    let error=this.state.error\r\n    Object.keys(error).forEach(key=> {\r\n      error[key]=''\r\n    });\r\n\r\n    let isError=false;\r\n    if(data.username==='') {error.username='Please Fill UserName';isError=true;}\r\n    if(data.age==='') {error.age='Please Fill Age';isError=true;}\r\n    if(data.designation==='') {error.designation='Please Fill Designation';isError=true;}\r\n    this.setState({error})\r\n    console.log(isError)\r\n    return isError;\r\n  }\r\n  getUser=()=>{\r\n    axios.get(this.props.serverURL+\"/api/getUser\",{params:{\r\n      code:this.state.code\r\n    }}).then(res=>{\r\n      console.log(res)\r\n      let data=this.state\r\n      let getdata=res.data.data[0]      \r\n      if(res.data.status===\"success\") {\r\n        data.username=getdata.username\r\n        data.age=getdata.age\r\n        data.designation=getdata.designation\r\n        data.isEdit=true\r\n        this.setState({data})\r\n      } \r\n    })\r\n  }\r\n  onSubmit=(e) => {\r\n    e.preventDefault();\r\n    if(!this.validateFields())  \r\n    {     \r\n      let data=this.state\r\n      let error=this.state.error\r\n      let url=this.state.isEdit?this.props.serverURL+\"/api/updateuser\":this.props.serverURL+\"/api/adduser\"\r\n      axios.post(url,data).then(res=>{\r\n        if(res.data.status===\"success\")\r\n          {\r\n            if(this.state.isEdit)\r\n            alert('Successfully Updated..!!');\r\n            else alert('Successfully Inserted..!!');\r\n        this.autoinc();\r\n        this.clear();\r\n      }\r\n      else alert(\"Connection Error..!\");\r\n    })\r\n    }\r\n  }\r\n  autoinc=()=>{\r\n    axios.get(this.props.serverURL+\"/api/adduser/auto\").then(res=>{\r\n      console.log(res)\r\n      this.setState({code:res.data[0].id})\r\n    })\r\n  }\r\n  componentDidMount=() =>{\r\n    this.autoinc();\r\n  }\r\n\r\n  render() {  \r\n    let\tview=(\r\n     <>\r\n     <div className=\"row text-left centerscreen\"> \r\n     <div className=\"col-4\"></div>\r\n     <div className=\"col-4\">\r\n     <Card>\r\n     <CardHeader tag=\"h4\">CRUD Operations (Test)</CardHeader>      \r\n     <CardBody className=\"padding-20 font-weight-bold\">\r\n\r\n     <div className=\"form-group\">\r\n     <label>UserCode</label>\r\n     <input name=\"code\" type=\"text\" className=\"form-control\" onChange={this.onChange} value={this.state.code} />\r\n     </div>     \r\n     <div className=\"form-group\">\r\n     <label>User Name</label>\r\n     <input name=\"username\" type=\"text\" className=\"form-control\" onChange={this.onChange} value={this.state.username} />\r\n     {this.state.error.username!==''?<span className=\"error\">{this.state.error.username}</span>:''}\r\n     </div>\r\n     <div className=\"form-group\">\r\n     <label>Age</label>\r\n     <input name=\"age\" type=\"number\" className=\"form-control\" onChange={this.onChange} value={this.state.age} />\r\n     {this.state.error.age!==''?<span className=\"error\">{this.state.error.age}</span>:''}\r\n     </div>\r\n     <div className=\"form-group\">\r\n     <label>Designation</label>\r\n     <input name=\"designation\" type=\"text\" className=\"form-control\" onChange={this.onChange} value={this.state.designation} />\r\n     {this.state.error.designation!==''?<span className=\"error\">{this.state.error.designation}</span>:''}\r\n     </div>\r\n\r\n     <div className=\"text-right\">\r\n     <Button color=\"primary\" onClick={this.onSubmit}>Submit</Button>{'  '}\r\n     <Button color=\"primary\" onClick={this.getUser}>GetData</Button>{'  '}\r\n     <Button color=\"secondary\" onClick={this.clear}>Clear</Button>\r\n     </div>\r\n     {this.state.error.errmsg!==''?<span className=\"error\">{this.state.error.errmsg}</span>:''}\r\n\r\n     </CardBody>\r\n     </Card>\r\n     </div>\r\n     <div className=\"col-4\"></div>\r\n     </div>\r\n     </>\r\n     )\r\n     return view;\r\n   }\r\n }\r\n\r\n export default App;","import React from 'react';\nimport { BrowserRouter as Router,basename } from 'react-router-dom';\n\nimport './App.css';\nimport Test from \"./test\";\n\nclass App extends React.Component {\n  constructor() {\n    super();\n    this.state = {\n      //serverURL:'http://localhost:4000'\n      serverURL:'http://18.213.86.227:4000'\n    }\n  }\n  render() {\n    return(\n    <Router basename=\"Test\">\n    <Test {...this.state} />\n    </Router>\n    )\n  }  \n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}